CREATE TABLE IF NOT EXISTS document (
    dbid INT AUTO_INCREMENT                     COMMENT 'Unique DBID generated by hashing the iri',
    path VARCHAR(255) NOT NULL                  COMMENT 'Relative path of document',
    version VARCHAR(10) NOT NULL                COMMENT 'Current document version',
    draft BOOLEAN NOT NULL DEFAULT FALSE        COMMENT '',

    PRIMARY KEY document_dbid_pk (dbid),
    INDEX document_draft(draft)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS concept (
    dbid INT AUTO_INCREMENT                     COMMENT 'Unique concept int DB identifier',
    document INT NOT NULL                       COMMENT 'Document this concept originated from',
    id VARCHAR(150) NOT NULL COLLATE utf8_bin   COMMENT 'Unique human-readable concept id',

    name VARCHAR(255)                           COMMENT '',
    description VARCHAR(400)                    COMMENT '',
    scheme VARCHAR(50)                          COMMENT '',
    code VARCHAR(20) COLLATE utf8_bin           COMMENT '',

    draft BOOLEAN NOT NULL DEFAULT FALSE        COMMENT '',
    use_count BIGINT NOT NULL DEFAULT 0         COMMENT '',

    PRIMARY KEY concept_pk (dbid),
    UNIQUE KEY concept_id_uq (id),
    INDEX concept_draft (draft),
    UNIQUE KEY concept_scheme_code_idx (scheme, code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS concept_property_object;
CREATE TABLE concept_property_object (
    dbid INT NOT NULL                       COMMENT 'Concept DBID',
    `group` INT NOT NULL DEFAULT 0          COMMENT 'Property group id',
    property INT NOT NULL                   COMMENT 'Property concept dbid',
    value INT NOT NULL                      COMMENT 'Property value concept dbid',

    INDEX concept_property_object_idx (dbid),
    INDEX concept_property_object_property_value (property, value),
    INDEX concept_property_object_value_idx (value)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS concept_property_data;
CREATE TABLE concept_property_data (
    dbid INT NOT NULL                       COMMENT 'Concept DBID',
    `group` INT NOT NULL DEFAULT 0          COMMENT 'Property group id',
    property INT NOT NULL                   COMMENT 'Property concept dbid',
    value VARCHAR(400)                      COMMENT 'Property value data',

    INDEX concept_property_data_idx (dbid),
    INDEX concept_property_data_property_value (property, value)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS concept_property_info;
CREATE TABLE concept_property_info (
    dbid INT NOT NULL                       COMMENT 'Concept DBID',
    `group` INT NOT NULL DEFAULT 0          COMMENT 'Property group id',
    property INT NOT NULL                   COMMENT 'Property concept dbid',
    value VARCHAR(200) NOT NULL             COMMENT 'Property value data',

    INDEX concept_property_info_idx (dbid),
    INDEX concept_property_info_property_value (property, value)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

    DROP TABLE IF EXISTS concept_tct;
    CREATE TABLE concept_tct (
        parent INT NOT NULL,
        property INT NOT NULL,
        level INT NOT NULL,
        child INT NOT NULL,

        KEY concept_tct_parent_property_idx (parent, property),
        KEY concept_tct_property_child_idx (property, child)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS concept_term_map;
CREATE TABLE concept_term_map (
    term VARCHAR(250) NOT NULL,
    type INT NOT NULL,
    target INT NOT NULL,
    draft BOOLEAN NOT NULL DEFAULT FALSE,
    PRIMARY KEY concept_term_map_pk (term, type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DELIMITER //

DROP PROCEDURE IF EXISTS proc_build_tct//

-- EXAMPLE - Subtype hierarchy...
-- CALL proc_build_tct("is_subtype_of");

CREATE PROCEDURE `proc_build_tct`(property_id VARCHAR(150))
BEGIN
    SELECT @lvl := 0;

    SELECT @property_dbid := dbid
    FROM concept
    WHERE id = property_id;

    DELETE FROM concept_tct
    WHERE property = @property_dbid;

    -- Insert root level (parent == null)
    INSERT INTO concept_tct
    (source, property, target, level)
    SELECT o.dbid, @property_dbid, o.value, @lvl
    FROM concept_property_object o
             LEFT JOIN concept_property_object p ON p.dbid = o.value AND p.property = @property_dbid
    WHERE o.property = @property_dbid
      AND p.value IS NULL;

    SELECT @inserted := ROW_COUNT();

    WHILE @inserted > 0 DO
    SELECT @lvl := @lvl + 1;
    SELECT 'Processing level ' + @lvl;

    INSERT IGNORE INTO concept_tct
    (source, property, target, level)
    SELECT o.dbid, @property_dbid, o.value, @lvl as level
    FROM concept_tct p
             JOIN concept_property_object o ON o.value = p.source AND o.property = @property_dbid
    WHERE p.property = @property_dbid
      AND p.level = @lvl - 1
    UNION
    SELECT DISTINCT o.dbid, @property_dbid, a.target, a.level
    FROM concept_tct p
             JOIN concept_property_object o ON o.value = p.source AND o.property = @property_dbid
             JOIN concept_tct a ON a.source = o.value AND a.property = @property_dbid
    WHERE p.property = @property_dbid
      AND p.level = @lvl - 1;

    SELECT @inserted := ROW_COUNT();
    END WHILE;
END; //

DROP FUNCTION IF EXISTS get_dbid//

CREATE FUNCTION get_dbid(concept_id VARCHAR(150)) RETURNS INTEGER
BEGIN
    DECLARE concept_dbid INTEGER DEFAULT NULL;
    SELECT dbid INTO concept_dbid
    FROM concept
    WHERE id = concept_id;

    IF (ISNULL(concept_dbid)) THEN
        SET @message = CONCAT('Concept not known [', concept_id, ']');
        SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @message;
    ELSE
        RETURN concept_dbid;
    END IF;
END; //

DELIMITER ;
